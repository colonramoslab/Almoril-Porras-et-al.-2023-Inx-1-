

existsAndDefault('fromScratch', false);
%% LOADING FILES FROM DISK
% loading specific files by name
ts1 = tic;
basedir = '\\LABNAS2\Phototaxis\Extracted Phototaxis Data\ReExtracted\Spatial Gradients\Linear';
esetname = 'lightLin';
if (fromScratch)
    close all;
      minpts = 50;

    % this code snippet loads the files if we haven't already loaded them, but
    % otherwise skips them; that way we can change the script and rerun it
    % without having to reload the files
    if (~exist('lightLin', 'var'))
        lightLin = ExperimentSet.fromFiles(basedir, 'minpts', minpts);
    end
    
    

    %% STITCH TRACKS
    % sometimes we miss a frame, so let's stitch together tracks that are close
    % by

    frameDiff = 2; % stitch together tracks if first ended 3 or fewer frames before second started
    maxDist = 10; % stitch together tracks if first ended within 7 pixels of second's start

    % For the script, I am executing this function with interactive off,
    % but if
    % you set interactive to true, it will show you each potential stitch and
    % let you decide whether or not to stitch it
    lightLin.executeExperimentFunction('stitchTracks', frameDiff, maxDist, 'interactive', false);

    %% CLEAN UP TRACKS
    % get rid of any tracks that don't go anywhere

    % create an EsetCleaner object

    ecl = ESetCleaner();

    % now let's look at the autogenerated report
    % let's get rid of all tracks less than 750 points and speed less than 0.4
    % pixels per second
    ecl.minPts = 500;
    ecl.minSpeed = 1.0;
    ecl.minHTValid = 0.95;

    %ecl.getReport(lightLin);
    

    

    % we've already shown the report, so we don't need to have it ask us first,
    % for the purposes of this script;  generally a good idea to leave this
    % enabled
    ecl.askFirst = false; 

    ecl.clean(lightLin);
    
    allloc = lightLin.gatherField('iloc');
    minl = min(allloc, [], 2);
    maxl = max(allloc, [], 2);
    
    buffer = 25;
    trimrect = [minl(1)+buffer minl(2)+buffer maxl(1)-buffer maxl(1)+buffer];
    lightLin.executeExperimentFunction('trimTracks', [], trimrect);
    
    
    disp('done with loading, stitching and cleaning');
    toc(ts1)
    ts1 = tic;
   % save (fullfile(basedir, 'marcmatfile.mat'), 'cryo');
    mkdir (fullfile(basedir, 'matfiles'));
    lightLin.toMatFiles(fullfile(basedir, 'matfiles',esetname));
    disp('saved file');
    toc(ts1)
    fromScratch = false;
else
    if (~exist('lightLin', 'var'))
        ts1 = tic;
     
        %load (fullfile(basedir, 'marcmatfile.mat'));
        lightLin = ExperimentSet.fromMatFiles(fullfile(basedir, 'matfiles',esetname));
        disp ('loaded eset from mat file');
        toc(ts1)
    end
end

existsAndDefault('resegment', true);
if (resegment)
    lightLin.executeTrackFunction('setSegmentSpeeds');
    lightLin.executeTrackFunction('segmentTrack');
    resegment = false;
end

sno.angleBinSize = 60;
sno.preferredDirection = 180;
%ad = spatialNavigationMaggotAnalysis(lightLin, sno);
%spatialNavigationMaggotFigures(lightLin, sno);

